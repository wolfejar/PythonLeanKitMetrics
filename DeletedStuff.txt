'''
# gauge total work load (size) per user
for user in card_size_by_user.keys():
    pipe_one.gauge("Leankit.Users.TotalSize." + user, card_size_by_user[user])
    '''

'''
# gauge points for game among users
for user in weekly_points_per_user:
    if weekly_points_per_user[user] > 0:
        pipe_one.gauge("Leankit.Game." + user, weekly_points_per_user[user])
# Send all stuck cards
for card in stuck_cards:
    print("ID-" + card[0]["ExternalCardID"] + ", stuck " + str(card[1].total_seconds()) + " seconds")
    pipe_one.gauge("Leankit.Cards.Stuck.ID-" + card[0]["ExternalCardID"], int(card[1].total_seconds()))
pipe_one.send()
print("Data sent...")


'''
'''
# gauge cycle time for each card per lane
for item in card_times.items():
    for lane_time_pair in item[1].items():
        pipe_one.gauge("Leankit.Cards.CycleTimes.ID-" + str(item[0]) + "." + lane_time_pair[0], lane_time_pair[1])
pipe_one.send()
print("Pipe one sent...")
print("Waiting...")
time.sleep(15)'''
'''# gauge cycle time for each card per user
for user in card_times_per_user.items():
    for item in user[1].items():
        for lane_time_pair in item[1].items():
            pipe_one.gauge("Leankit.Users.CycleTimes."+user[0]+".ID-" + str(item[0]) + "." + lane_time_pair[0],
                           lane_time_pair[1])
pipe_one.send()
print("Pipe one sent...")
print("Waiting...")
time.sleep(15)'''


'''
    # record card sizes per user
    for card in lane["Cards"]:
        for username in card["AssignedUsers"]:
            username = username["FullName"]
            if username in card_size_by_user.keys():
                card_size_by_user[username] += card["Size"]
            else:
                card_size_by_user[username] = card["Size"]
    for child_lane in lane["ChildLanes"]:
        for card in child_lane["Cards"]:
            for username in card["AssignedUsers"]:
                username = username["FullName"]
                if username in card_size_by_user.keys():
                    card_size_by_user[username] += card["Size"]
                else:
                    card_size_by_user[username] = card["Size"]
    '''
    '''
    # Calculate lead time for cards in "Done" lane
    if lane["Title"] == "Done":
        for card in lane["Cards"]:
            creation_date = datetime.combine(AppDevBoard.get_card(card["Id"])["CreateDate"], datetime.min.time())
            lead_time = (parser.parse(card["LastMove"]) - creation_date).total_seconds()
            pipe_one.gauge("Leankit.Cards.Types."+card["TypeName"]+".ID-"+card["ExternalCardID"], lead_time)
            pipe_one.gauge("Leankit.Cards.Sizes."+card["Size"]+".ID-"+card["ExternalCardID"], lead_time)
            # record weekly deployment stats
            last_monday = date.today() + relativedelta(weekday=MO(-1))
            if parser.parse(card["LastMove"]) >= datetime.combine(last_monday, datetime.min.time()):
                size_of_cards_deployed_this_week += card["Size"]
        for child_lane in lane["ChildLanes"]:
            for card in child_lane["Cards"]:
                creation_date = datetime.combine(AppDevBoard.get_card(card["Id"])["CreateDate"], datetime.min.time())
                lead_time = (parser.parse(card["LastMove"]) - creation_date).total_seconds()
                pipe_one.gauge("Leankit.Cards.Types." + card["TypeName"] + ".ID-" + card["ExternalCardID"],
                               lead_time)
                pipe_one.gauge("Leankit.Cards.Sizes." + str(card["Size"]) + ".ID-" + card["ExternalCardID"], lead_time)
                # record weekly deployment stats
                last_monday = date.today() + relativedelta(weekday=MO(-1))
                if parser.parse(card["LastMove"]) >= datetime.combine(last_monday, datetime.min.time()):
                    size_of_cards_deployed_this_week += card["Size"]
            for child_child_lane in child_lane["ChildLanes"]:
                for card in child_child_lane["Cards"]:
                    creation_date = datetime.combine(AppDevBoard.get_card(card["Id"])["CreateDate"],
                                                     datetime.min.time())
                    lead_time = (parser.parse(card["LastMove"]) - creation_date).total_seconds()
                    pipe_one.gauge("Leankit.Cards.Types." + card["TypeName"] + ".ID-" + card["ExternalCardID"],
                                   lead_time)
                    pipe_one.gauge("Leankit.Cards.Sizes." + str(card["Size"]) + ".ID-" + card["ExternalCardID"],
                                   lead_time)
                    # record weekly deployment stats
                    last_monday = date.today() + relativedelta(weekday=MO(-1))
                    if parser.parse(card["LastMove"]) >= datetime.combine(last_monday, datetime.min.time()):
                        size_of_cards_deployed_this_week += card["Size"]
    '''
'''   # record card points dev complete per user this week
    if lane["Title"] == "Dev Complete":
        for card in lane["Cards"]:
            if parser.parse(card["LastMove"]) >= datetime.combine(last_monday, datetime.min.time()):
                for username in card["AssignedUsers"]:
                    username = username["FullName"]
                    if username in cards_developed_this_week.keys():
                        cards_developed_this_week[username] += int(card["Size"])
                    else:
                        cards_developed_this_week[username] = int(card["Size"])''
# include plot here for total card size per user

'''    for user in cards_developed_this_week.keys():
        pipe_one.gauge("Leankit.Users.WeeklyDevelopment." + user, cards_developed_this_week[user])
    # gauge total size of cards deployed this week
    pipe_one.gauge("Leankit.WeeklyDeployments", size_of_cards_deployed_this_week)
    pipe_one.send()
    print("Data sent...")
'''


'''pie_layout = go.Layout(
    title='Lane Limits',
    annotations=pie_annotation_list,
)
fig = {
    'data': lane_limit_pie_list,
    'layout': pie_layout
}

py.plot(fig, filename="Lane-Limits", auto_open=False)
print("Lane Limits... Done")'''

lane_limit_pie = {
            'labels': ['Open', 'WIP'],
            'values': [size_available, size],
            'name': lane["Title"],
            'type': 'pie',
            'text': [lane["Title"]],
            'textinfo': 'value',
            'marker': {
                'colors': ['#41f44c', '#f48641']
            },
            'domain': {
                'x': [x1, x2],
                'y': [y1, y2]
            }
        }
        pie_annotation = {
            'font': {'size': 20},
            'showarrow': False,
            'text': lane["Title"],
            'x': x1,
            'y': (y1 + y2) / 2
        }
        lane_limit_pie_list.append(lane_limit_pie)
        pie_annotation_list.append(pie_annotation)

index += 1
        x1 = 0
        x2 = 0
        y1 = 0
        y2 = 0
        if index % 2 == 0:
            x1 = 0.66
            x2 = 1
        else:
            x1 = 0
            x2 = 0.33
        if index <= 2:
            y1 = 0.66
            y2 = 1
        if 2 < index <= 4:
            y1 = 0.33
            y2 = 0.66
        if 4 < index <= 6:
            y1 = 0
            y2 = 0.33

# record card sizes per user
    for card in lane["Cards"]:
        for username in card["AssignedUsers"]:
            username = username["FullName"]
            if username in card_size_by_user.keys():
                card_size_by_user[username] += card["Size"]
            else:
                card_size_by_user[username] = card["Size"]
    for child_lane in lane["ChildLanes"]:
        for card in child_lane["Cards"]:
            for username in card["AssignedUsers"]:
                username = username["FullName"]
                if username in card_size_by_user.keys():
                    card_size_by_user[username] += card["Size"]
                else:
                    card_size_by_user[username] = card["Size"]
